FROM ubuntu:18.04
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
    build-essential git pkg-config python python-dev \
    protobuf-compiler libprotobuf-dev libgoogle-glog-dev \
    libboost-all-dev libyaml-cpp-dev && rm -rf /var/lib/apt/lists/*

WORKDIR /root
RUN git clone https://github.com/nvdla/sw.git
WORKDIR /root/sw/umd

RUN rm -rf out && \
    export TOP=$(pwd) && \
    make -C core/src/compiler -j"$(nproc)" \
      CC="gcc -fPIC" CXX="g++ -fPIC" \
      CFLAGS="-fPIC -D_GLIBCXX_USE_CXX11_ABI=0" \
      CXXFLAGS="-fPIC -D_GLIBCXX_USE_CXX11_ABI=0" && \
    make -C apps/compiler -j"$(nproc)" \
      CFLAGS="-D_GLIBCXX_USE_CXX11_ABI=0" \
      CXXFLAGS="-D_GLIBCXX_USE_CXX11_ABI=0" \
      CXX="g++ -no-pie"

RUN cd /root/sw/umd \
    rm -rf out \
    # 1) core 以 -fPIC 全量重编（会同时编 vendored protobuf 的对象）
    export TOP=$PWD \
    make -C core/src/compiler -j"$(nproc)" \
      CC="gcc -fPIC" CXX="g++ -fPIC" \
      CFLAGS="-fPIC" CXXFLAGS="-fPIC" \
    # 2) **精准补丁**：把 apps/compiler 的“最终链接行”改成 g++ -no-pie ...
    #    先备份，再就地替换。下面两条 sed 兼容两种写法（直接 g++ / 或用 $(CXX) ）。
    cp -a apps/compiler/Makefile apps/compiler/Makefile.bak \
    # 2a) 若最终链接行以 g++ 开头（你的日志就是这种）
    sed -ri 's#^([[:space:]]*)g\+\+[[:space:]]+#\1g++ -no-pie #g' apps/compiler/Makefile \
    # 2b) 兼容以 $(CXX) 开头的写法（如果有的话，一并替换）
    sed -ri 's#^([[:space:]]*)\$\((CXX|C\+\+)\)[[:space:]]+#\1g++ -no-pie #g' apps/compiler/Makefile \
    # 3) 构建 apps/compiler
    make -C apps/compiler -j"$(nproc)" \
    # 4) 验证“最终链接行”是否真的包含 -no-pie（可选）
    grep -n 'nvdla_compiler' -n apps/compiler/Makefile | head -n 1 

RUN mkdir -p /opt/nvdla && \
    find /root/sw -type f -name "nvdla_compiler" -exec cp {} /opt/nvdla/ \; && \
    find /root/sw -type f -name "nvdla_emit"     -exec cp {} /opt/nvdla/ \; || true
ENV PATH="/opt/nvdla:${PATH}"
