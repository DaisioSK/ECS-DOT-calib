name: "cifar_simplecnn"
input: "data"
input_shape { dim: 1 dim: 3 dim: 32 dim: 32 }

layer { name: "_features_features_0_net_net_0_Conv" type: "Convolution" bottom: "data" top: "_features_features_0_net_net_0_Conv"
  convolution_param { num_output: 64 kernel_size: 3 stride: 1 pad: 1
    bias_term: true
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" }
  } }
layer { name: "relu__features_features_0_net_net_0_Conv" type: "ReLU" bottom: "_features_features_0_net_net_0_Conv" top: "_features_features_0_net_net_0_Conv" }
layer { name: "_features_features_0_net_net_2_Conv" type: "Convolution" bottom: "_features_features_0_net_net_0_Conv" top: "_features_features_0_net_net_2_Conv"
  convolution_param { num_output: 64 kernel_size: 3 stride: 1 pad: 1
    bias_term: true
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" }
  } }
layer { name: "relu__features_features_0_net_net_2_Conv" type: "ReLU" bottom: "_features_features_0_net_net_2_Conv" top: "_features_features_0_net_net_2_Conv" }
layer { name: "_features_features_0_net_net_4_MaxPool" type: "Pooling" bottom: "_features_features_0_net_net_2_Conv" top: "_features_features_0_net_net_4_MaxPool"
  pooling_param { pool: MAX kernel_size: 2 stride: 2 pad: 0 } }
layer { name: "_features_features_1_net_net_0_Conv" type: "Convolution" bottom: "_features_features_0_net_net_4_MaxPool" top: "_features_features_1_net_net_0_Conv"
  convolution_param { num_output: 64 kernel_size: 3 stride: 1 pad: 1
    bias_term: true
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" }
  } }
layer { name: "relu__features_features_1_net_net_0_Conv" type: "ReLU" bottom: "_features_features_1_net_net_0_Conv" top: "_features_features_1_net_net_0_Conv" }
layer { name: "_features_features_1_net_net_2_Conv" type: "Convolution" bottom: "_features_features_1_net_net_0_Conv" top: "_features_features_1_net_net_2_Conv"
  convolution_param { num_output: 64 kernel_size: 3 stride: 1 pad: 1
    bias_term: true
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" }
  } }
layer { name: "relu__features_features_1_net_net_2_Conv" type: "ReLU" bottom: "_features_features_1_net_net_2_Conv" top: "_features_features_1_net_net_2_Conv" }
layer { name: "_features_features_1_net_net_4_MaxPool" type: "Pooling" bottom: "_features_features_1_net_net_2_Conv" top: "_features_features_1_net_net_4_MaxPool"
  pooling_param { pool: MAX kernel_size: 2 stride: 2 pad: 0 } }
layer { name: "_features_features_2_net_net_0_Conv" type: "Convolution" bottom: "_features_features_1_net_net_4_MaxPool" top: "_features_features_2_net_net_0_Conv"
  convolution_param { num_output: 64 kernel_size: 3 stride: 1 pad: 1
    bias_term: true
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" }
  } }
layer { name: "relu__features_features_2_net_net_0_Conv" type: "ReLU" bottom: "_features_features_2_net_net_0_Conv" top: "_features_features_2_net_net_0_Conv" }
layer { name: "_features_features_2_net_net_2_Conv" type: "Convolution" bottom: "_features_features_2_net_net_0_Conv" top: "_features_features_2_net_net_2_Conv"
  convolution_param { num_output: 64 kernel_size: 3 stride: 1 pad: 1
    bias_term: true
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" }
  } }
layer { name: "relu__features_features_2_net_net_2_Conv" type: "ReLU" bottom: "_features_features_2_net_net_2_Conv" top: "_features_features_2_net_net_2_Conv" }
layer { name: "_features_features_2_net_net_4_MaxPool" type: "Pooling" bottom: "_features_features_2_net_net_2_Conv" top: "_features_features_2_net_net_4_MaxPool"
  pooling_param { pool: MAX kernel_size: 2 stride: 2 pad: 0 } }
layer { name: "_classifier_classifier_0_Flatten" type: "Flatten" bottom: "_features_features_2_net_net_4_MaxPool" top: "flat" }
layer { name: "_classifier_classifier_1_Gemm" type: "InnerProduct" bottom: "flat" top: "_classifier_classifier_1_Gemm"
  inner_product_param { num_output: 256
    bias_term: true
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" }
  } }
layer { name: "relu__classifier_classifier_1_Gemm" type: "ReLU" bottom: "_classifier_classifier_1_Gemm" top: "_classifier_classifier_1_Gemm" }
layer { name: "_classifier_classifier_3_Gemm" type: "InnerProduct" bottom: "_classifier_classifier_1_Gemm" top: "_classifier_classifier_3_Gemm"
  inner_product_param { num_output: 256
    bias_term: true
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" }
  } }
